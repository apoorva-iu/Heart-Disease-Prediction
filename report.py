import streamlit as st
from fpdf import FPDF
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import os
from datetime import datetime
from io import BytesIO

# ---------------- Gauge Chart ----------------
def show_risk_gauge(probability):
    fig = go.Figure(go.Indicator(
        mode="gauge+number",
        value=probability * 100,
        title={'text': "Heart Disease Risk (%)"},
        gauge={
            'axis': {'range': [0, 100]},
            'bar': {'color': "darkred"},
            'steps': [
                {'range': [0, 40], 'color': "lightgreen"},
                {'range': [40, 70], 'color': "yellow"},
                {'range': [70, 100], 'color': "red"},
            ],
        }
    ))
    return fig

# ---------------- Healthy Range Chart (Matplotlib) ----------------
def plot_input_vs_healthy(input_dict):
    friendly_labels = {
        "age": "Age",
        "trestbps": "BP",
        "chol": "Cholesterol",
        "thalach": "Heart Rate",
        "oldpeak": "Depression"
    }
    ranges = {
        "age": (20, 60),
        "trestbps": (90, 120),
        "chol": (150, 240),
        "thalach": (120, 190),
        "oldpeak": (0.0, 2.0)
    }

    fig, ax = plt.subplots(figsize=(8, 4))
    for col in ranges.keys():
        if col in input_dict:
            value = input_dict[col][0]
            ax.bar(friendly_labels[col], value, color="skyblue")
            ax.axhspan(ranges[col][0], ranges[col][1], color="lightgreen", alpha=0.3)

    ax.set_ylabel("Value")
    ax.set_title("Inputs vs. Healthy Ranges")
    fig.tight_layout()
    return fig

# ---------------- Generate PDF Function ----------------
def generate_pdf_report(input_dict, prediction, proba, fig_gauge, fig_bar):
    pdf = FPDF()
    pdf.add_page()
    
    # Title
    pdf.set_font("Arial", size=16, style="B")
    pdf.cell(0, 10, "Heart Disease Prediction Report", ln=1, align='C')
    pdf.ln(5)
    
    # Prediction & Probability
    pdf.set_font("Arial", size=12)
    pdf.cell(0, 10, f"Prediction: {'Likely' if prediction==1 else 'Unlikely'}", ln=1)
    pdf.cell(0, 10, f"Probability: {proba:.2f}", ln=1)
    pdf.ln(5)
    
    # Patient Input Features
    pdf.set_font("Arial", style="B", size=12)
    pdf.cell(0, 10, "Patient Input Features:", ln=1)
    pdf.set_font("Arial", size=11)
    for k, v in input_dict.items():
        pdf.cell(0, 8, f"- {k}: {v[0]}", ln=1)
    pdf.ln(5)
    
    # Save gauge chart to a buffer and add to PDF
    try:
        gauge_buffer = BytesIO()
        fig_gauge.write_image(gauge_buffer, format='png', engine='kaleido')
        gauge_buffer.seek(0)
        
        with open("temp_gauge.png", "wb") as f:
            f.write(gauge_buffer.getvalue())
            
        pdf.image("temp_gauge.png", x=30, w=pdf.w - 60)
        os.remove("temp_gauge.png")
    except Exception as e:
        st.warning(f"Could not add gauge chart to PDF: {e}")
    
    # Save healthy range chart to a buffer and add to PDF
    try:
        healthy_buffer = BytesIO()
        fig_bar.savefig(healthy_buffer, format='png', bbox_inches='tight')
        healthy_buffer.seek(0)
        
        with open("temp_healthy.png", "wb") as f:
            f.write(healthy_buffer.getvalue())
            
        pdf.ln(10)
        pdf.image("temp_healthy.png", x=25, w=pdf.w - 50)
        os.remove("temp_healthy.png")
    except Exception as e:
        st.warning(f"Could not add healthy range chart to PDF: {e}")
    
    # Footer
    pdf.set_y(-20)
    pdf.set_font("Arial", style="I", size=10)
    pdf.set_text_color(100, 100, 100)
    current_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    footer_text = f"Report generated on: {current_date} | Generated by Heart Disease Prediction App"
    pdf.cell(0, 10, footer_text, 0, 0, 'C')
    
    # Return PDF as bytes
    return bytes(pdf.output(dest='S'))

# ---------------- Report Page ----------------
def show_report_page():
    st.title("üìÑ Generate Patient Report")
    st.write("Download a PDF report including the summary and graphs.")

    # Get stored data from prediction page
    input_dict = st.session_state.get("input_dict", None)
    prediction = st.session_state.get("prediction", None)
    proba = st.session_state.get("proba", None)

    if not input_dict or prediction is None or proba is None:
        st.info("‚ö†Ô∏è Make a prediction first on the Prediction page to generate a report.")
        return

    # ---------------- Copyable Summary ----------------
    summary_text = f"‚ù§Ô∏è Heart Disease Prediction Report\n\n"
    summary_text += f"Prediction: {'Likely to have Heart Disease' if prediction==1 else 'Unlikely to have Heart Disease'}\n"
    summary_text += f"Probability: {proba:.2f}\n\n"
    summary_text += "Input Features:\n"
    for k, v in input_dict.items():
        summary_text += f"- {k}: {v[0]}\n"

    st.subheader("üìã Copyable Summary")
    st.text_area("Summary", summary_text, height=300)

    # ---------------- Graphs ----------------
    st.subheader("üìä Risk Meter")
    fig_gauge = show_risk_gauge(proba)
    st.plotly_chart(fig_gauge, use_container_width=True)

    st.subheader("üìä Your Input vs Healthy Ranges")
    fig_bar = plot_input_vs_healthy(input_dict)
    st.pyplot(fig_bar)
    st.caption("‚úÖ Green shaded areas indicate healthy ranges.")

    # ---------------- Generate PDF ----------------
    if st.button("Generate PDF Report"):
        with st.spinner("Generating PDF..."):
            try:
                pdf_data = generate_pdf_report(input_dict, prediction, proba, fig_gauge, fig_bar)
                
                st.download_button(
                    label="Download PDF Report",
                    data=pdf_data,
                    file_name="patient_report.pdf",
                    mime="application/pdf"
                )
                st.success("PDF generated successfully! Click the download button above.")
                
            except Exception as e:
                st.error(f"Error generating PDF: {str(e)}")
